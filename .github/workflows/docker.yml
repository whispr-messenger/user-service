name: üê≥ Container Registry

on:
  repository_dispatch:
    types: [run-docker]
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      should_deploy:
        required: false
        type: string
        default: 'false'

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/user-service

jobs:
  # ================================
  # Build and test Docker image
  # ================================
  docker-build:
    name: üî® Image Build & Scan
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.event.client_payload.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}},enable={{is_default_branch}}

      - name: Build Docker image for testing
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
        continue-on-error: true

      - name: Upload Docker Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('docker-trivy-results.sarif') != ''
        with:
          sarif_file: 'docker-trivy-results.sarif'

      - name: Should deploy check
        id: deploy-check
        run: |
          SHOULD_DEPLOY="${{ inputs.should_deploy || github.event.client_payload.should_deploy }}"
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "üîç Should deploy: $SHOULD_DEPLOY"

  # ================================
  # Push Docker image (conditional)
  # ================================
  docker-push:
    name: ‚¨ÜÔ∏è Registry Push & Attest
    runs-on: ubuntu-latest
    needs: docker-build
    if: (inputs.should_deploy == 'true') || (github.event.client_payload.should_deploy == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.event.client_payload.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for production
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=stable,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=User Service
            org.opencontainers.image.description=User management microservice
            org.opencontainers.image.vendor=Epitech
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate and attest SBOM
        uses: anchore/sbom-action@v0.16.0
        id: sbom
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Verify SBOM file exists
        run: |
          echo "üîç Checking SBOM outputs..."
          # Check both possible outputs from anchore/sbom-action as a fallback strategy:
          # - sbom-path: traditional output that may be unreliable in some versions
          # - sbom-file: alternative output that might be set instead
          echo "SBOM path from action: '${{ steps.sbom.outputs.sbom-path }}'"
          echo "SBOM file from action: '${{ steps.sbom.outputs.sbom-file }}'"
          if [ -f "sbom.spdx.json" ]; then
            echo "‚úÖ SBOM file exists: sbom.spdx.json"
            echo "sbom_file_path=sbom.spdx.json" >> $GITHUB_OUTPUT
          elif [ -n "${{ steps.sbom.outputs.sbom-path }}" ] && [ -f "${{ steps.sbom.outputs.sbom-path }}" ]; then
            echo "‚úÖ SBOM file exists at: ${{ steps.sbom.outputs.sbom-path }}"
            echo "sbom_file_path=${{ steps.sbom.outputs.sbom-path }}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå SBOM file not found!"
            # List only SBOM-related files for focused debugging
            ls -la *.spdx.json || find . -name '*.spdx.json' || echo "No SBOM files found"
            exit 1
          fi
        id: verify-sbom

      - name: Attest SBOM to image
        uses: actions/attest-sbom@v1
        id: attest-sbom
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: ${{ steps.verify-sbom.outputs.sbom_file_path }}
          push-to-registry: true

      - name: Generate provenance attestation
        uses: actions/attest-build-provenance@v1
        id: attest-provenance
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true